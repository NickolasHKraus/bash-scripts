#!/usr/bin/env bash
#
# Usage: git-clone-gh [-u <user>] [-o <org>]
#
# Description: Clones all repositories for the specified user or organization.
#
# Examples:
#
#   git-clone-gh -u NickolasHKraus
#
#   git-clone-gh -o Dwolla

function usage {
  echo 'usage: git-clone-gh [-u <user>] [-o <org>]'
}

if [ -z $1 ] || [ $1 != '-u' -a $1 != '-o' ]; then
	echo -en "\033[0;31m"
  echo "Specify a valid flag (-u or -o)."
	echo -en "\033[0m\n"
  usage
  exit 1
fi

if [ -z $2 ]; then
	echo -en "\033[0;31m"
	echo "Specify a user or organization."
	echo -en "\033[0m\n"
  usage
  exit 1
fi

eval `ssh-agent -s` >/dev/null 2>&1 && \
  ssh-add ~/.ssh/id_rsa >/dev/null 2>&1

ssh git@github.com >/dev/null 2>&1

if [ $? -eq 255 ]; then
	echo -en "\033[0;31m"
	echo "Permission denied (publickey)."
	echo -en "\033[0m"
  exit 1
fi

if [ $1 == '-u' ]; then
  RESOURCE="users/$2/repos"
elif [ $1 == '-o' ]; then
  RESOURCE="orgs/$2/repos"
else
  exit 1
fi

# The GitHub API only returns 30 results. Therefore, increment PAGE until no
# results are returned.
PAGE=1
SSH_URLS=()
while true; do
  urls=($(curl -s "https://api.github.com/$RESOURCE?sort=full_name&page=$PAGE" | jq '.[].ssh_url' | tr -d \"))
  if [ ${#urls[@]} -eq 0 ]; then
    break
  else
    SSH_URLS+=(${urls[@]})
  fi
  let PAGE=PAGE+1
done

for ssh_url in "${SSH_URLS[@]}"; do

  echo Cloning "${ssh_url}"..

  output=$(git clone "${ssh_url}" 2>&1)

  if [ $(echo $output | grep -i "already exists" -c) -ne 0 ]; then
    echo -en "\033[0;31m"
    echo "Repository already exists."
    echo -en "\033[0m"
  fi

done

# clean up ssh-agent
ssh-agent -k >/dev/null 2>&1
